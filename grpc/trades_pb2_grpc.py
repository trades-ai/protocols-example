# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import trades_pb2 as trades__pb2


class TradesStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getStock = channel.unary_unary(
                '/tradesPackage.Trades/getStock',
                request_serializer=trades__pb2.SelectStock.SerializeToString,
                response_deserializer=trades__pb2.Stock.FromString,
                )
        self.getStockStream = channel.unary_stream(
                '/tradesPackage.Trades/getStockStream',
                request_serializer=trades__pb2.SelectStock.SerializeToString,
                response_deserializer=trades__pb2.Stock.FromString,
                )
        self.getStocks = channel.unary_unary(
                '/tradesPackage.Trades/getStocks',
                request_serializer=trades__pb2.Void.SerializeToString,
                response_deserializer=trades__pb2.Stocks.FromString,
                )
        self.buyStock = channel.unary_unary(
                '/tradesPackage.Trades/buyStock',
                request_serializer=trades__pb2.Stock.SerializeToString,
                response_deserializer=trades__pb2.PurchaseHistory.FromString,
                )
        self.buyStockStream = channel.stream_stream(
                '/tradesPackage.Trades/buyStockStream',
                request_serializer=trades__pb2.Stock.SerializeToString,
                response_deserializer=trades__pb2.PurchaseHistory.FromString,
                )


class TradesServicer(object):
    """Missing associated documentation comment in .proto file."""

    def getStock(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getStockStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getStocks(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def buyStock(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def buyStockStream(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TradesServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getStock': grpc.unary_unary_rpc_method_handler(
                    servicer.getStock,
                    request_deserializer=trades__pb2.SelectStock.FromString,
                    response_serializer=trades__pb2.Stock.SerializeToString,
            ),
            'getStockStream': grpc.unary_stream_rpc_method_handler(
                    servicer.getStockStream,
                    request_deserializer=trades__pb2.SelectStock.FromString,
                    response_serializer=trades__pb2.Stock.SerializeToString,
            ),
            'getStocks': grpc.unary_unary_rpc_method_handler(
                    servicer.getStocks,
                    request_deserializer=trades__pb2.Void.FromString,
                    response_serializer=trades__pb2.Stocks.SerializeToString,
            ),
            'buyStock': grpc.unary_unary_rpc_method_handler(
                    servicer.buyStock,
                    request_deserializer=trades__pb2.Stock.FromString,
                    response_serializer=trades__pb2.PurchaseHistory.SerializeToString,
            ),
            'buyStockStream': grpc.stream_stream_rpc_method_handler(
                    servicer.buyStockStream,
                    request_deserializer=trades__pb2.Stock.FromString,
                    response_serializer=trades__pb2.PurchaseHistory.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'tradesPackage.Trades', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Trades(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def getStock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tradesPackage.Trades/getStock',
            trades__pb2.SelectStock.SerializeToString,
            trades__pb2.Stock.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getStockStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/tradesPackage.Trades/getStockStream',
            trades__pb2.SelectStock.SerializeToString,
            trades__pb2.Stock.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getStocks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tradesPackage.Trades/getStocks',
            trades__pb2.Void.SerializeToString,
            trades__pb2.Stocks.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def buyStock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/tradesPackage.Trades/buyStock',
            trades__pb2.Stock.SerializeToString,
            trades__pb2.PurchaseHistory.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def buyStockStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/tradesPackage.Trades/buyStockStream',
            trades__pb2.Stock.SerializeToString,
            trades__pb2.PurchaseHistory.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
